>  def integrate[f,a,b,n] =
    let h = (b-a)/n in
    let iter[x,i] = 
        if i == 0 then 0
        else f[x] + iter[x+h, i-1]
    in h (f[a] / 2 + iter[a+h, n-1] + f[b]/2)
Inferred type: ((['A]) -> ['B] x ['A] x ['A] x []) -> ['A * 'B]
(clojure.core/defn
 integrate
 [f a b n]
 (clojure.core/let
  [h (/ (- b a) n)]
  (clojure.core/let
   [iter
    (clojure.core/fn
     [x i]
     (if (= i 0) 0 (+ (f x) (iter (+ x h) (- i 1)))))]
   (* h (+ (+ (/ (f a) 2) (iter (+ a h) (- n 1))) (/ (f b) 2))))))
>  def integrate[f: 'A -> 'B, a: 'A, b: 'A, n: 1]: 'A 'B =
    let h = (b-a)/n in
    let iter[x: 'A, i: 1]: 'B = 
        if i == 0 then 0
        else f[x] + iter[x+h, i-1]
    in h (f[a] / 2 + iter[a+h, n-1] + f[b]/2)
Inferred type: ((['B]) -> ['A] x ['B] x ['B] x []) -> ['B * 'A]
(clojure.core/defn
 integrate
 [f a b n]
 (clojure.core/let
  [h (/ (- b a) n)]
  (clojure.core/let
   [iter
    (clojure.core/fn
     [x i]
     (if (= i 0) 0 (+ (f x) (iter (+ x h) (- i 1)))))]
   (* h (+ (+ (/ (f a) 2) (iter (+ a h) (- n 1))) (/ (f b) 2))))))
