# dimensions [L T M]
# alias velocity = L / T
# alias acceleration = velocity / T
# alias force = M * acceleration
# dimension L, T
# dimension velocity = L / T
# unit m  : L
# unit s  : T
# unit kg : M
# unit N  : force
#
# unit x : D could be syntactic sugar for
# def x = 1 : D (this would not type check)
# Need means of combination for dimension names (alias above)
# Not really explicit need to define dimensions
# But some form of structured dimension expressions

unit m ;;
unit s ;;
unit kg ;;

# which one makes more sense?
unit N = kg m / s^2 ;;
def N = kg m / s^2 ;;

def l = 20 m ;;
def t = 2 s ;;
def v = 10 m / s ;;
def ma = 1 kg ;;
def F = 5 N ;;

# should all be True
l/t == v ;;
v t == 20 m ;;
ma v/t == F ;;
l/t + v == 20 m/s ;;

def square[x] = x * x ;;
square[t] == 4 s s ;;

def my_sum[x,y] = x + y ;;
my_sum[1,1] == 2 ;;

def apply_twice[f] = fn [x] f[f[x]] ;;
def apply_to_twice[f,x] = f[2*x] ;;

apply_twice[square, 3s] == 81 s^4 ;;
apply_to_twice[square, 3s] == 36 s^2 ;;

# Recursion
def factorial[x] = if x == 0 then 1 else x * factorial[x-1] ;;
factorial[5] == 120 ;;

# Does messing with names create any problems?
def y = 1 ;;
def bla[y] = y + 1 ;;
bla[2] == 3 ;;
y == 1 ;;

# Do closures work? (y is 1)
def bla2[x] = x + y ;;
bla2[1] == 2 ;;
def y = 10 ;;
bla2[1] == r ;;
